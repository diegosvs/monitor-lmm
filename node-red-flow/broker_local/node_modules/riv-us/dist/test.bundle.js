/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var req = __webpack_require__(1);
	req.keys().forEach(req);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./config/config.test.js": 2,
		"./synchronize/synchronize.test.js": 15
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 1;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {'use strict';
	
	var _regenerator = __webpack_require__(3);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _asyncToGenerator2 = __webpack_require__(4);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _path = __webpack_require__(5);
	
	var _path2 = _interopRequireDefault(_path);
	
	var _chai = __webpack_require__(6);
	
	var _chai2 = _interopRequireDefault(_chai);
	
	var _config = __webpack_require__(7);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var expect = _chai2.default.expect;
	_chai2.default.should();
	
	
	describe('Config', function () {
	  it('accepts object as an initializer', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
	    var config;
	    return _regenerator2.default.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return new _config2.default({ one: 'two' }).load();
	
	          case 2:
	            config = _context.sent;
	
	
	            config.should.be.an('object');
	            config.constructor.name.should.eql('ResolvedConfig');
	            config.optional('one', 'one').should.eql('two');
	
	          case 6:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, this);
	  })));
	
	  it('accepts file name as an initializer', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
	    var configFile, config;
	    return _regenerator2.default.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            configFile = _path2.default.join(__dirname, 'config.json');
	            _context2.next = 3;
	            return new _config2.default(configFile).load();
	
	          case 3:
	            config = _context2.sent;
	
	
	            config.should.be.an('object');
	            config.constructor.name.should.eql('ResolvedConfig');
	            config.optional('one', 'one').should.eql('one-one-one');
	
	          case 7:
	          case 'end':
	            return _context2.stop();
	        }
	      }
	    }, _callee2, this);
	  })));
	
	  it('has a method to get optional value with a default', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
	    var config;
	    return _regenerator2.default.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            _context3.next = 2;
	            return new _config2.default({ one: 'two' }).load();
	
	          case 2:
	            config = _context3.sent;
	
	            config.optional('missing', 'xxx').should.eql('xxx');
	
	          case 4:
	          case 'end':
	            return _context3.stop();
	        }
	      }
	    }, _callee3, this);
	  })));
	
	  it('has a method to throw an exception if mandatory value is missing', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
	    var config;
	    return _regenerator2.default.wrap(function _callee4$(_context4) {
	      while (1) {
	        switch (_context4.prev = _context4.next) {
	          case 0:
	            _context4.next = 2;
	            return new _config2.default({ one: 'two' }).load();
	
	          case 2:
	            config = _context4.sent;
	
	
	            config.mandatory.bind(config, 'missing').should.throw(Error);
	
	          case 4:
	          case 'end':
	            return _context4.stop();
	        }
	      }
	    }, _callee4, this);
	  })));
	
	  it('has a method to obtain a config section', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
	    var config, emptySection, optionalEmptySection, section, nullSection;
	    return _regenerator2.default.wrap(function _callee5$(_context5) {
	      while (1) {
	        switch (_context5.prev = _context5.next) {
	          case 0:
	            _context5.next = 2;
	            return new _config2.default({
	              one: 'two',
	              mySection: {
	                two: 'three'
	              },
	              nullSection: null
	            }).load();
	
	          case 2:
	            config = _context5.sent;
	            emptySection = config.section('missing');
	
	            emptySection.should.be.an('object');
	            emptySection.attributes.should.be.empty;
	
	            optionalEmptySection = config.section('missing', { optional: true });
	
	            expect(optionalEmptySection).to.be.null;
	
	            section = config.section('mySection');
	
	            section.should.be.an('object');
	            section.optional('two').should.eql('three');
	
	            nullSection = config.section('nullSection', { optional: true });
	
	            expect(nullSection).to.be.null;
	
	          case 13:
	          case 'end':
	            return _context5.stop();
	        }
	      }
	    }, _callee5, this);
	  })));
	
	  describe('interpolation', function () {
	    beforeEach(function () {
	      process.env.HELLO = 'World!';
	      process.env.HELLO_REFERENCED = '${HELLO}';
	      process.env.SECTION = '{"someValue": 100500}';
	      process.env.SECTION_2 = '{"someValue": {"otherValue": 100500}}';
	      process.env.ARRAY_SECTION = '{"arrayValue": [{"someValue": 10}]}';
	    });
	
	    afterEach(function () {
	      delete process.env.HELLO;
	      delete process.env.HELLO_REFERENCED;
	      delete process.env.SECTION;
	      delete process.env.SECTION_2;
	      delete process.env.ARRAY_SECTION;
	    });
	
	    it('expands expressions with environment variables', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
	      var config;
	      return _regenerator2.default.wrap(function _callee6$(_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              _context6.next = 2;
	              return new _config2.default({
	                one: '${HELLO}'
	              }).load();
	
	            case 2:
	              config = _context6.sent;
	
	              config.mandatory('one').should.eql('World!');
	
	            case 4:
	            case 'end':
	              return _context6.stop();
	          }
	        }
	      }, _callee6, this);
	    })));
	
	    it('expands expressions', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
	      var config;
	      return _regenerator2.default.wrap(function _callee7$(_context7) {
	        while (1) {
	          switch (_context7.prev = _context7.next) {
	            case 0:
	              _context7.next = 2;
	              return new _config2.default({
	                one: '${HELLO_REFERENCED}'
	              }).load();
	
	            case 2:
	              config = _context7.sent;
	
	              config.mandatory('one').should.eql('World!');
	
	            case 4:
	            case 'end':
	              return _context7.stop();
	          }
	        }
	      }, _callee7, this);
	    })));
	
	    it('expands longer expressions', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
	      var config;
	      return _regenerator2.default.wrap(function _callee8$(_context8) {
	        while (1) {
	          switch (_context8.prev = _context8.next) {
	            case 0:
	              _context8.next = 2;
	              return new _config2.default({
	                one: '${SECTION_2.someValue.otherValue}'
	              }).load();
	
	            case 2:
	              config = _context8.sent;
	
	              config.mandatory('one').should.eql(100500);
	
	            case 4:
	            case 'end':
	              return _context8.stop();
	          }
	        }
	      }, _callee8, this);
	    })));
	
	    it('ignores unset variables for optional cases', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9() {
	      var config;
	      return _regenerator2.default.wrap(function _callee9$(_context9) {
	        while (1) {
	          switch (_context9.prev = _context9.next) {
	            case 0:
	              delete process.env.HELLO;
	
	              _context9.next = 3;
	              return new _config2.default({
	                one: '${HELLO_REFERENCED}'
	              }).load();
	
	            case 3:
	              config = _context9.sent;
	
	
	              config.optional('one', 'two').should.eql('two');
	
	            case 5:
	            case 'end':
	              return _context9.stop();
	          }
	        }
	      }, _callee9, this);
	    })));
	
	    it('interpolates expressions with sections JSON', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10() {
	      var config;
	      return _regenerator2.default.wrap(function _callee10$(_context10) {
	        while (1) {
	          switch (_context10.prev = _context10.next) {
	            case 0:
	              _context10.next = 2;
	              return new _config2.default({
	                one: '${SECTION}'
	              }).load();
	
	            case 2:
	              config = _context10.sent;
	
	              config.section('one').mandatory('someValue').should.eql(100500);
	
	            case 4:
	            case 'end':
	              return _context10.stop();
	          }
	        }
	      }, _callee10, this);
	    })));
	
	    it('ignores unset variables for optional sections', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11() {
	      var config;
	      return _regenerator2.default.wrap(function _callee11$(_context11) {
	        while (1) {
	          switch (_context11.prev = _context11.next) {
	            case 0:
	              _context11.next = 2;
	              return new _config2.default({
	                one: '${SECTIONX}'
	              }).load();
	
	            case 2:
	              config = _context11.sent;
	
	
	              expect(config.section('one', { optional: true })).to.be.null;
	
	            case 4:
	            case 'end':
	              return _context11.stop();
	          }
	        }
	      }, _callee11, this);
	    })));
	
	    it('resolves arrays with a single elements', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12() {
	      var config;
	      return _regenerator2.default.wrap(function _callee12$(_context12) {
	        while (1) {
	          switch (_context12.prev = _context12.next) {
	            case 0:
	              _context12.next = 2;
	              return new _config2.default({
	                v: '${ARRAY_SECTION.arrayValue.someValue}'
	              }).load();
	
	            case 2:
	              config = _context12.sent;
	
	
	              config.mandatory('v').should.eql(10);
	
	            case 4:
	            case 'end':
	              return _context12.stop();
	          }
	        }
	      }, _callee12, this);
	    })));
	  });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, "test/config"))

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/regenerator");

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/asyncToGenerator");

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = require("chai");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ResolvedConfig = undefined;
	
	var _getIterator2 = __webpack_require__(8);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	var _assign = __webpack_require__(9);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _promise = __webpack_require__(10);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _typeof2 = __webpack_require__(11);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _classCallCheck2 = __webpack_require__(12);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(13);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _fs = __webpack_require__(14);
	
	var _fs2 = _interopRequireDefault(_fs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Config = function () {
	  function Config(source) {
	    var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    (0, _classCallCheck3.default)(this, Config);
	
	    if (typeof source === 'string') {
	      this.promise = loadConfigFromFile(source).then(function (config) {
	        return resolveConfig(config, overrides);
	      });
	    } else if ((typeof source === 'undefined' ? 'undefined' : (0, _typeof3.default)(source)) === 'object') {
	      this.promise = _promise2.default.resolve(resolveConfig(source, overrides));
	    } else {
	      this.promise = _promise2.default.reject(new Error('invalid configuration parameter: ' + (typeof source === 'undefined' ? 'undefined' : (0, _typeof3.default)(source))));
	    }
	  }
	
	  (0, _createClass3.default)(Config, [{
	    key: 'load',
	    value: function load() {
	      return this.promise;
	    }
	  }]);
	  return Config;
	}();
	
	exports.default = Config;
	
	var ResolvedConfig = exports.ResolvedConfig = function () {
	  function ResolvedConfig() {
	    var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var section = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	    (0, _classCallCheck3.default)(this, ResolvedConfig);
	
	    this.attributes = attributes;
	    this.sectionName = section;
	  }
	
	  (0, _createClass3.default)(ResolvedConfig, [{
	    key: 'optional',
	    value: function optional(key, defaultValue) {
	      var value = this.attributes[key];
	
	      if (value !== undefined) {
	        value = interpolateConfigValue(value, true);
	      }
	
	      return value === undefined ? defaultValue : value;
	    }
	  }, {
	    key: 'mandatory',
	    value: function mandatory(key) {
	      if (this.attributes[key] !== undefined) {
	        return interpolateConfigValue(this.attributes[key]);
	      }
	      throw new Error('missing mandatory option [' + key + '] in config ' + this.sectionName);
	    }
	  }, {
	    key: 'section',
	    value: function section(key) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { optional: false };
	
	      var newSectionAttributes = this.attributes[key];
	      var newSectionName = this.sectionName ? this.sectionName + '.' + key : key;
	
	      if (!newSectionAttributes) {
	        return options.optional ? null : new ResolvedConfig({}, newSectionName);
	      }
	
	      switch (typeof newSectionAttributes === 'undefined' ? 'undefined' : (0, _typeof3.default)(newSectionAttributes)) {
	        case 'object':
	          return new ResolvedConfig(newSectionAttributes, newSectionName);
	        case 'string':
	          return interpolateSection(newSectionAttributes, newSectionName, options.optional);
	        default:
	          throw new Error('config: option [' + key + '] should be an object');
	      }
	    }
	  }]);
	  return ResolvedConfig;
	}();
	
	function loadConfigFromFile(fileName) {
	  return new _promise2.default(function (resolve, reject) {
	    _fs2.default.readFile(fileName, 'utf8', function (err, data) {
	      if (err) {
	        reject(new Error('error reading config file: ' + err.message));
	      } else {
	        resolve(JSON.parse(data));
	      }
	    });
	  });
	}
	
	function resolveConfig(attributes, overrides) {
	  return new ResolvedConfig((0, _assign2.default)({}, attributes, overrides));
	}
	
	function interpolateConfigValue(value) {
	  var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (typeof value === 'string') {
	    var match = value.match(/^\${(.+)}$/);
	    if (match) {
	      return interpolateConfigValue(interpolateExpression(match[1], optional), optional);
	    }
	  }
	
	  return value;
	}
	
	function interpolateExpression(expression) {
	  var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  var parts = expression.split('.');
	  var firstPart = true;
	  var value = null;
	
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;
	
	  try {
	    for (var _iterator = (0, _getIterator3.default)(parts), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var part = _step.value;
	
	      if (firstPart) {
	        firstPart = false;
	        value = first(part, optional);
	        if (value === undefined && optional) {
	          return undefined;
	        }
	        if (value === 'true' || value === 'false') {
	          value = JSON.parse(value);
	        }
	      } else {
	        value = next(value, part);
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	
	  return value;
	
	  function first(part, optional) {
	    if (!process.env[part]) {
	      if (optional) {
	        return undefined;
	      }
	
	      throw new Error('config: cannot interpolate expression [' + expression + ']: ' + ('environment variable ' + part + ' is not set'));
	    }
	
	    var value = process.env[part];
	
	    if (parts.length > 1) {
	      try {
	        value = JSON.parse(value);
	      } catch (e) {
	        throw new Error('config: cannot interpolate expression [' + expression + ']: ' + ('environment variable ' + part + ' is not a valid JSON'));
	      }
	    }
	
	    return value;
	  }
	
	  function next(value, part) {
	    if (Array.isArray(value)) {
	      if (value.length !== 1) {
	        throw new Error('config: cannot interpolate expression [' + expression + ']: ' + ('item [' + part + '] is an array of length ' + value.length));
	      }
	      return next(value[0], part);
	    } else if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
	      return value[part];
	    } else {
	      throw new Error('config: cannot interpolate expression [' + expression + ']: ' + ('key path missing at ' + part));
	    }
	  }
	}
	
	function interpolateSection(expression, sectionName, optional) {
	  var attributes = interpolateConfigValue(expression, optional);
	
	  if (attributes) {
	    try {
	      attributes = JSON.parse(attributes);
	      if ((typeof attributes === 'undefined' ? 'undefined' : (0, _typeof3.default)(attributes)) !== 'object') {
	        attributes = null;
	      }
	    } catch (e) {
	      attributes = null;
	    }
	
	    if (!attributes) {
	      throw new Error('config: ' + sectionName + ': cannot interpolate expression [' + expression + ']: ' + 'object expected');
	    }
	  }
	
	  if (attributes) {
	    return new ResolvedConfig(attributes, sectionName);
	  } else if (!optional) {
	    return new ResolvedConfig({}, sectionName);
	  } else {
	    return null;
	  }
	}

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/core-js/get-iterator");

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/core-js/object/assign");

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/core-js/promise");

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/typeof");

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/classCallCheck");

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/createClass");

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _regenerator = __webpack_require__(3);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _asyncToGenerator2 = __webpack_require__(4);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var verifyStore = function () {
	  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(feed, store) {
	    var storePosts, mockPosts;
	    return _regenerator2.default.wrap(function _callee5$(_context5) {
	      while (1) {
	        switch (_context5.prev = _context5.next) {
	          case 0:
	            _context5.next = 2;
	            return store.getFeedPosts(feed, 0, Number.MAX_VALUE);
	
	          case 2:
	            _context5.t0 = _momentize.demomentize;
	            storePosts = _context5.sent.map(_context5.t0);
	            _context5.next = 6;
	            return feed.fetchPosts(Number.MAX_VALUE);
	
	          case 6:
	            _context5.t1 = _momentize.demomentize;
	            mockPosts = _context5.sent.map(_context5.t1);
	
	            expect(mockPosts).to.deep.equal(storePosts, 'expected posts are not in data store');
	
	          case 9:
	          case 'end':
	            return _context5.stop();
	        }
	      }
	    }, _callee5, this);
	  }));
	
	  return function verifyStore(_x, _x2) {
	    return _ref5.apply(this, arguments);
	  };
	}();
	
	var _chai = __webpack_require__(6);
	
	var _chai2 = _interopRequireDefault(_chai);
	
	var _moment = __webpack_require__(16);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _synchronize = __webpack_require__(17);
	
	var _synchronize2 = _interopRequireDefault(_synchronize);
	
	var _createMemoryDataStore = __webpack_require__(23);
	
	var _createMemoryDataStore2 = _interopRequireDefault(_createMemoryDataStore);
	
	var _provider = __webpack_require__(30);
	
	var _provider2 = _interopRequireDefault(_provider);
	
	var _feed = __webpack_require__(31);
	
	var _feed2 = _interopRequireDefault(_feed);
	
	var _momentize = __webpack_require__(28);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var expect = _chai2.default.expect;
	_chai2.default.should();
	
	describe('synchronization', function () {
	  describe('with a single provider', function () {
	    beforeEach(function () {
	      this.firstProvider = firstProvider();
	      this.feed = new _feed2.default('f', [this.firstProvider]);
	      this.dataStore = (0, _createMemoryDataStore2.default)();
	    });
	
	    afterEach((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
	      return _regenerator2.default.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return this.dataStore.drop();
	
	            case 2:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    })));
	
	    it('works properly on initial run', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
	      return _regenerator2.default.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return (0, _synchronize2.default)(this.feed, this.dataStore);
	
	            case 2:
	              _context2.next = 4;
	              return verifyStore(this.feed, this.dataStore);
	
	            case 4:
	            case 'end':
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    })));
	  });
	
	  describe('with two providers', function () {
	    beforeEach(function () {
	      this.firstProvider = firstProvider();
	      this.secondProvider = secondProvider();
	      this.feed = new _feed2.default('f', [this.firstProvider, this.secondProvider]);
	      this.dataStore = (0, _createMemoryDataStore2.default)();
	    });
	
	    afterEach((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
	      return _regenerator2.default.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.next = 2;
	              return this.dataStore.drop();
	
	            case 2:
	            case 'end':
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    })));
	
	    it('works properly on initial run', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
	      return _regenerator2.default.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              _context4.next = 2;
	              return (0, _synchronize2.default)(this.feed, this.dataStore);
	
	            case 2:
	              _context4.next = 4;
	              return verifyStore(this.feed, this.dataStore);
	
	            case 4:
	            case 'end':
	              return _context4.stop();
	          }
	        }
	      }, _callee4, this);
	    })));
	  });
	});
	
	function firstProvider() {
	  return new _provider2.default('p1', [{
	    id: 'p1-1',
	    created_time: (0, _moment2.default)(0),
	    source: { name: 'p1' }
	  }, {
	    id: 'p1-2',
	    created_time: (0, _moment2.default)(10000),
	    source: { name: 'p1' }
	  }, {
	    id: 'p1-3',
	    created_time: (0, _moment2.default)(100000),
	    source: { name: 'p1' }
	  }]);
	}
	
	function secondProvider() {
	  return new _provider2.default('p2', [{
	    id: 'p2-1',
	    created_time: (0, _moment2.default)(5000),
	    source: { name: 'p2' }
	  }, {
	    id: 'p2-2',
	    created_time: (0, _moment2.default)(50000),
	    source: { name: 'p2' }
	  }, {
	    id: 'p2-3',
	    created_time: (0, _moment2.default)(500000),
	    source: { name: 'p2' }
	  }]);
	}

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = require("moment");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _regenerator = __webpack_require__(3);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _promise = __webpack_require__(10);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _asyncToGenerator2 = __webpack_require__(4);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var synchronizeProvider = function () {
	  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(dataStore, provider) {
	    var _this = this;
	
	    return _regenerator2.default.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            _context3.next = 2;
	            return dataStore.synchronizeProvider(provider, function () {
	              var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(savedLastPostDate, writeStore) {
	                var newPosts;
	                return _regenerator2.default.wrap(function _callee2$(_context2) {
	                  while (1) {
	                    switch (_context2.prev = _context2.next) {
	                      case 0:
	                        _context2.next = 2;
	                        return loadNewPostsFromProvider(provider, savedLastPostDate);
	
	                      case 2:
	                        newPosts = _context2.sent;
	
	                        if (newPosts.length) {
	                          _context2.next = 5;
	                          break;
	                        }
	
	                        return _context2.abrupt('return', savedLastPostDate);
	
	                      case 5:
	                        writeStore.savePosts(newPosts);
	                        writeStore.addPostsToProvider(provider, newPosts);
	                        return _context2.abrupt('return', newPosts[0].created_time);
	
	                      case 8:
	                      case 'end':
	                        return _context2.stop();
	                    }
	                  }
	                }, _callee2, _this);
	              }));
	
	              return function (_x5, _x6) {
	                return _ref3.apply(this, arguments);
	              };
	            }());
	
	          case 2:
	            return _context3.abrupt('return', _context3.sent);
	
	          case 3:
	          case 'end':
	            return _context3.stop();
	        }
	      }
	    }, _callee3, this);
	  }));
	
	  return function synchronizeProvider(_x3, _x4) {
	    return _ref2.apply(this, arguments);
	  };
	}();
	
	var mergeProviderUpdatesToFeed = function () {
	  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(feed, dataStore, providers, newFeedDates) {
	    var _this2 = this;
	
	    return _regenerator2.default.wrap(function _callee5$(_context5) {
	      while (1) {
	        switch (_context5.prev = _context5.next) {
	          case 0:
	            _context5.next = 2;
	            return dataStore.synchronizeFeed(feed, function () {
	              var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(savedFeedDates, writeStore) {
	                var updates, posts;
	                return _regenerator2.default.wrap(function _callee4$(_context4) {
	                  while (1) {
	                    switch (_context4.prev = _context4.next) {
	                      case 0:
	                        updates = collectUpdatesInFeed(providers, savedFeedDates, newFeedDates);
	
	                        if (updates.length) {
	                          _context4.next = 3;
	                          break;
	                        }
	
	                        return _context4.abrupt('return', savedFeedDates);
	
	                      case 3:
	                        _context4.t0 = _deduplicatePosts2.default;
	                        _context4.t1 = feed;
	                        _context4.next = 7;
	                        return getPostsFromUpdates(updates, dataStore);
	
	                      case 7:
	                        _context4.t2 = _context4.sent;
	                        _context4.t3 = _context4.t1.filterPosts.call(_context4.t1, _context4.t2);
	                        posts = (0, _context4.t0)(_context4.t3);
	
	                        writeStore.addPostsToFeed(feed, posts);
	
	                        return _context4.abrupt('return', newFeedDates);
	
	                      case 12:
	                      case 'end':
	                        return _context4.stop();
	                    }
	                  }
	                }, _callee4, _this2);
	              }));
	
	              return function (_x11, _x12) {
	                return _ref5.apply(this, arguments);
	              };
	            }());
	
	          case 2:
	            return _context5.abrupt('return', _context5.sent);
	
	          case 3:
	          case 'end':
	            return _context5.stop();
	        }
	      }
	    }, _callee5, this);
	  }));
	
	  return function mergeProviderUpdatesToFeed(_x7, _x8, _x9, _x10) {
	    return _ref4.apply(this, arguments);
	  };
	}();
	
	var getPostsFromUpdates = function () {
	  var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(updates, dataStore) {
	    var _this3 = this;
	
	    var posts;
	    return _regenerator2.default.wrap(function _callee7$(_context7) {
	      while (1) {
	        switch (_context7.prev = _context7.next) {
	          case 0:
	            _context7.next = 2;
	            return _promise2.default.all(updates.map(function () {
	              var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(update) {
	                var posts;
	                return _regenerator2.default.wrap(function _callee6$(_context6) {
	                  while (1) {
	                    switch (_context6.prev = _context6.next) {
	                      case 0:
	                        _context6.next = 2;
	                        return dataStore.getProviderPosts(update.provider, update.endDate, update.startDate);
	
	                      case 2:
	                        posts = _context6.sent;
	
	                        if (!(update.startDate && update.startDate.isSame(posts[posts.length - 1].created_time))) {
	                          _context6.next = 7;
	                          break;
	                        }
	
	                        return _context6.abrupt('return', posts.slice(0, -1));
	
	                      case 7:
	                        return _context6.abrupt('return', posts);
	
	                      case 8:
	                      case 'end':
	                        return _context6.stop();
	                    }
	                  }
	                }, _callee6, _this3);
	              }));
	
	              return function (_x15) {
	                return _ref7.apply(this, arguments);
	              };
	            }()));
	
	          case 2:
	            posts = _context7.sent;
	            return _context7.abrupt('return', posts.reduce(function (allPosts, providerPosts) {
	              return allPosts.concat(providerPosts);
	            }, []));
	
	          case 4:
	          case 'end':
	            return _context7.stop();
	        }
	      }
	    }, _callee7, this);
	  }));
	
	  return function getPostsFromUpdates(_x13, _x14) {
	    return _ref6.apply(this, arguments);
	  };
	}();
	
	var loadNewPostsFromProvider = function () {
	  var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(provider, savedPostDate) {
	    var loadNewPostsFromProviderRec = function () {
	      var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(pageToken) {
	        var newFeed, thisPagePosts, i, postDate, nextPagePosts;
	        return _regenerator2.default.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                _context8.next = 2;
	                return provider.fetchPosts(20, pageToken);
	
	              case 2:
	                newFeed = _context8.sent;
	                thisPagePosts = [];
	                i = 0;
	
	              case 5:
	                if (!(i < newFeed.posts.length)) {
	                  _context8.next = 13;
	                  break;
	                }
	
	                postDate = newFeed.posts[i].created_time;
	
	                if (!(!!savedPostDate && postDate.isSameOrBefore(savedPostDate))) {
	                  _context8.next = 9;
	                  break;
	                }
	
	                return _context8.abrupt('return', thisPagePosts);
	
	              case 9:
	
	                thisPagePosts.push(newFeed.posts[i]);
	
	              case 10:
	                i++;
	                _context8.next = 5;
	                break;
	
	              case 13:
	                if (!(!thisPagePosts.length || !newFeed.nextPageToken)) {
	                  _context8.next = 15;
	                  break;
	                }
	
	                return _context8.abrupt('return', thisPagePosts);
	
	              case 15:
	                _context8.next = 17;
	                return loadNewPostsFromProviderRec(newFeed.nextPageToken);
	
	              case 17:
	                nextPagePosts = _context8.sent;
	                return _context8.abrupt('return', thisPagePosts.concat(nextPagePosts));
	
	              case 19:
	              case 'end':
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this);
	      }));
	
	      return function loadNewPostsFromProviderRec(_x18) {
	        return _ref9.apply(this, arguments);
	      };
	    }();
	
	    return _regenerator2.default.wrap(function _callee9$(_context9) {
	      while (1) {
	        switch (_context9.prev = _context9.next) {
	          case 0:
	            _context9.next = 2;
	            return loadNewPostsFromProviderRec();
	
	          case 2:
	            return _context9.abrupt('return', _context9.sent);
	
	          case 3:
	          case 'end':
	            return _context9.stop();
	        }
	      }
	    }, _callee9, this);
	  }));
	
	  return function loadNewPostsFromProvider(_x16, _x17) {
	    return _ref8.apply(this, arguments);
	  };
	}();
	
	var _log = __webpack_require__(18);
	
	var _log2 = _interopRequireDefault(_log);
	
	var _deduplicatePosts = __webpack_require__(20);
	
	var _deduplicatePosts2 = _interopRequireDefault(_deduplicatePosts);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(feed, dataStore) {
	    var feedId, providers, newFeedDates;
	    return _regenerator2.default.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            feedId = feed.getFeedId();
	
	
	            _log2.default.info('synchronizing feed ' + feedId + '...');
	
	            _context.prev = 2;
	            providers = feed.getProviders();
	            _context.next = 6;
	            return _promise2.default.all(providers.map(function (p) {
	              return synchronizeProvider(dataStore, p);
	            }));
	
	          case 6:
	            newFeedDates = _context.sent;
	            _context.next = 9;
	            return mergeProviderUpdatesToFeed(feed, dataStore, providers, newFeedDates);
	
	          case 9:
	
	            _log2.default.info('completed synchronizing feed ' + feedId);
	            _context.next = 16;
	            break;
	
	          case 12:
	            _context.prev = 12;
	            _context.t0 = _context['catch'](2);
	
	            _log2.default.error('error while synchronizing feed ' + feedId, _context.t0);
	            throw _context.t0;
	
	          case 16:
	          case 'end':
	            return _context.stop();
	        }
	      }
	    }, _callee, this, [[2, 12]]);
	  }));
	
	  function synchronize(_x, _x2) {
	    return _ref.apply(this, arguments);
	  }
	
	  return synchronize;
	}();
	
	function collectUpdatesInFeed(providers, savedFeedDates, newFeedDates) {
	  return providers.map(function (provider, index) {
	    var startDate = savedFeedDates ? savedFeedDates[index] : null;
	    var endDate = newFeedDates[index];
	
	    if (!startDate && !endDate) {
	      return null;
	    }
	
	    return {
	      provider: provider,
	      startDate: startDate,
	      endDate: endDate
	    };
	  }).filter(function (update) {
	    return !!update && (!update.startDate || update.endDate.isAfter(update.startDate));
	  });
	}
	
	module.exports = exports['default'];

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _winston = __webpack_require__(19);
	
	var _winston2 = _interopRequireDefault(_winston);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var disableLog = process.env.NODE_ENV === 'test' && !process.env.RIVUS_LOG_LEVEL;
	var logLevel = process.env.RIVUS_LOG_LEVEL || 'info';
	var prettyLog = !process.env.RIVUS_LOG_SIMPLE;
	
	var logParams = {
	  console: {
	    level: logLevel,
	    colorize: prettyLog,
	    timestamp: true,
	    prettyPrint: prettyLog,
	    humanReadableUnhandledException: true
	  }
	};
	
	var log = _winston2.default.loggers.add('rivus', logParams);
	if (disableLog) {
	  _winston2.default.loggers.get('rivus').remove(_winston2.default.transports.Console);
	}
	
	exports.default = log;
	module.exports = exports['default'];

/***/ },
/* 19 */
/***/ function(module, exports) {

	module.exports = require("winston");

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _keys = __webpack_require__(21);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _set = __webpack_require__(22);
	
	var _set2 = _interopRequireDefault(_set);
	
	exports.default = deduplicatePosts;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DEDUPLICATION_TIME_WINDOW = 3000; // 3 seconds
	
	function deduplicatePosts(posts) {
	  // TODO: make me smarter
	  var duplicateIds = findDuplicates(groupPostsByTimeWindow(posts));
	  return posts.filter(function (p) {
	    return !duplicateIds.has(p.id);
	  });
	}
	
	function groupPostsByTimeWindow(posts) {
	  var postsByTimeWindow = {};
	
	  posts.forEach(function (post) {
	    var window = Math.floor(post.created_time.valueOf() / DEDUPLICATION_TIME_WINDOW);
	    postsByTimeWindow[window] = postsByTimeWindow[window] || [];
	    postsByTimeWindow[window].push(post);
	  });
	
	  return postsByTimeWindow;
	}
	
	function findDuplicates(postsByTimeWindow) {
	  var duplicateIds = new _set2.default();
	
	  (0, _keys2.default)(postsByTimeWindow).forEach(function (window) {
	    var posts = postsByTimeWindow[window];
	    if (posts.length > 0) {
	      posts.sort(function (p1, p2) {
	        return providerPriority(p1.source.name) - providerPriority(p2.source.name);
	      }).slice(1).forEach(function (p) {
	        return duplicateIds.add(p.id);
	      });
	    }
	  });
	
	  return duplicateIds;
	}
	
	function providerPriority(providerName) {
	  switch (providerName) {
	    case 'instagram':
	      return 100;
	    case 'medium':
	      return 50;
	    case 'facebook':
	      return 5;
	    case 'twitter':
	      return 1;
	    default:
	      return 0;
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/core-js/object/keys");

/***/ },
/* 22 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/core-js/set");

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createMemoryDataStore;
	
	var _fakeredis = __webpack_require__(24);
	
	var _fakeredis2 = _interopRequireDefault(_fakeredis);
	
	var _log = __webpack_require__(18);
	
	var _log2 = _interopRequireDefault(_log);
	
	var _RedisDataStore = __webpack_require__(25);
	
	var _RedisDataStore2 = _interopRequireDefault(_RedisDataStore);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function createMemoryDataStore() {
	  _log2.default.info('riv-us: using in-memory data store');
	
	  var fakeClient = _fakeredis2.default.createClient(888, 'riv-us', { fast: true });
	
	  return new _RedisDataStore2.default(fakeClient);
	}
	module.exports = exports['default'];

/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = require("fakeredis");

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _promise = __webpack_require__(10);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _stringify = __webpack_require__(26);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _toConsumableArray2 = __webpack_require__(27);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	var _regenerator = __webpack_require__(3);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _asyncToGenerator2 = __webpack_require__(4);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _classCallCheck2 = __webpack_require__(12);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(13);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var loadPostsByIds = function () {
	  var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(client, postIds) {
	    return _regenerator2.default.wrap(function _callee7$(_context7) {
	      while (1) {
	        switch (_context7.prev = _context7.next) {
	          case 0:
	            if (postIds.length) {
	              _context7.next = 2;
	              break;
	            }
	
	            return _context7.abrupt('return', []);
	
	          case 2:
	            _context7.next = 4;
	            return redisQuery.apply(undefined, [client, 'mget'].concat((0, _toConsumableArray3.default)(postIds.map(Keys.post))));
	
	          case 4:
	            _context7.t0 = function (data) {
	              return (0, _momentize.momentize)(JSON.parse(data));
	            };
	
	            return _context7.abrupt('return', _context7.sent.map(_context7.t0));
	
	          case 6:
	          case 'end':
	            return _context7.stop();
	        }
	      }
	    }, _callee7, this);
	  }));
	
	  return function loadPostsByIds(_x11, _x12) {
	    return _ref7.apply(this, arguments);
	  };
	}();
	
	var redisQuery = function () {
	  var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(client, command) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }
	
	    return _regenerator2.default.wrap(function _callee8$(_context8) {
	      while (1) {
	        switch (_context8.prev = _context8.next) {
	          case 0:
	            _log2.default.debug.apply(_log2.default, ['Redis: ' + command].concat((0, _toConsumableArray3.default)(args.map(function (arg) {
	              return '"' + arg + '"';
	            }))));
	
	            _context8.next = 3;
	            return new _promise2.default(function (resolve, reject) {
	              if (!client[command]) {
	                reject(new Error('Redis: undefined command ' + command));
	                return;
	              }
	
	              client[command].apply(client, [].concat(args, [function (err, response) {
	                if (err) {
	                  _log2.default.warn.apply(_log2.default, ['Redis: error ' + command].concat((0, _toConsumableArray3.default)(args.map(function (arg) {
	                    return '"' + arg + '"';
	                  })), [':', err]));
	                  reject(new Error('Redis: ' + err.message));
	                } else {
	                  resolve(response);
	                }
	              }]));
	            });
	
	          case 3:
	            return _context8.abrupt('return', _context8.sent);
	
	          case 4:
	          case 'end':
	            return _context8.stop();
	        }
	      }
	    }, _callee8, this);
	  }));
	
	  return function redisQuery(_x13, _x14) {
	    return _ref8.apply(this, arguments);
	  };
	}();
	
	var _moment = __webpack_require__(16);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _log = __webpack_require__(18);
	
	var _log2 = _interopRequireDefault(_log);
	
	var _momentize = __webpack_require__(28);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Keys = {
	  post: function post(id) {
	    return 'rivus:posts:' + id;
	  },
	  providerLastPostDate: function providerLastPostDate(p) {
	    return 'rivus:anchor:provider:' + p.feedId;
	  },
	  providerPostIds: function providerPostIds(p) {
	    return 'rivus:provider:' + p.feedId;
	  },
	  feedLastPostDates: function feedLastPostDates(f) {
	    return 'rivus:anchor:feed:' + f.getFeedId();
	  },
	  feedPostIds: function feedPostIds(f) {
	    return 'rivus:feed:' + f.getFeedId();
	  }
	};
	
	var RedisDataStore = function () {
	  function RedisDataStore(client) {
	    (0, _classCallCheck3.default)(this, RedisDataStore);
	
	    this.client = client;
	  }
	
	  (0, _createClass3.default)(RedisDataStore, [{
	    key: 'synchronizeProvider',
	    value: function () {
	      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(provider, updater) {
	        var lastPostDateKey, providerLastPostDate, writeStore, newProviderLastPostDate;
	        return _regenerator2.default.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                lastPostDateKey = Keys.providerLastPostDate(provider);
	                _context.next = 3;
	                return redisQuery(this.client, 'watch', lastPostDateKey);
	
	              case 3:
	                _context.t0 = dateFromRedis;
	                _context.next = 6;
	                return redisQuery(this.client, 'get', lastPostDateKey);
	
	              case 6:
	                _context.t1 = _context.sent;
	                providerLastPostDate = (0, _context.t0)(_context.t1);
	                writeStore = new RedisWriteDataStore(this.client);
	                _context.prev = 9;
	                _context.next = 12;
	                return updater(providerLastPostDate, writeStore);
	
	              case 12:
	                newProviderLastPostDate = _context.sent;
	
	                writeStore.saveLastProviderPostDate(provider, newProviderLastPostDate);
	                _context.next = 16;
	                return writeStore.commit();
	
	              case 16:
	                return _context.abrupt('return', newProviderLastPostDate);
	
	              case 19:
	                _context.prev = 19;
	                _context.t2 = _context['catch'](9);
	
	                _log2.default.warn('Redis: error while synchronizing provider `' + provider.feedId + '`:', _context.t2);
	                writeStore.discard();
	                throw _context.t2;
	
	              case 24:
	              case 'end':
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[9, 19]]);
	      }));
	
	      function synchronizeProvider(_x, _x2) {
	        return _ref.apply(this, arguments);
	      }
	
	      return synchronizeProvider;
	    }()
	  }, {
	    key: 'synchronizeFeed',
	    value: function () {
	      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(feed, updater) {
	        var lastPostDatesKey, lastPostDates, writeStore, newLastPostDates;
	        return _regenerator2.default.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                lastPostDatesKey = Keys.feedLastPostDates(feed);
	                _context2.next = 3;
	                return redisQuery(this.client, 'watch', lastPostDatesKey);
	
	              case 3:
	                _context2.next = 5;
	                return redisQuery(this.client, 'get', lastPostDatesKey);
	
	              case 5:
	                lastPostDates = _context2.sent;
	
	                if (lastPostDates) {
	                  lastPostDates = JSON.parse(lastPostDates);
	                  if (Array.isArray(lastPostDates)) {
	                    lastPostDates = lastPostDates.map(dateFromRedis);
	                  } else {
	                    lastPostDates = null;
	                  }
	                }
	
	                writeStore = new RedisWriteDataStore(this.client);
	                _context2.prev = 8;
	                _context2.next = 11;
	                return updater(lastPostDates, writeStore);
	
	              case 11:
	                newLastPostDates = _context2.sent;
	
	                writeStore.saveLastFeedPostDates(feed, newLastPostDates);
	                _context2.next = 15;
	                return writeStore.commit();
	
	              case 15:
	                return _context2.abrupt('return', newLastPostDates);
	
	              case 18:
	                _context2.prev = 18;
	                _context2.t0 = _context2['catch'](8);
	
	                _log2.default.warn('Redis: error while synchronizing feed `' + feed.getFeedId() + '`:', _context2.t0);
	                writeStore.discard();
	                throw _context2.t0;
	
	              case 23:
	              case 'end':
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this, [[8, 18]]);
	      }));
	
	      function synchronizeFeed(_x3, _x4) {
	        return _ref2.apply(this, arguments);
	      }
	
	      return synchronizeFeed;
	    }()
	  }, {
	    key: 'getFeedPosts',
	    value: function () {
	      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(feed) {
	        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	        var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
	        var postIds;
	        return _regenerator2.default.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _context3.next = 2;
	                return redisQuery(this.client, 'zrevrangebyscore', Keys.feedPostIds(feed), Number.MAX_VALUE, 0, 'LIMIT', offset, limit);
	
	              case 2:
	                postIds = _context3.sent;
	                _context3.next = 5;
	                return loadPostsByIds(this.client, postIds);
	
	              case 5:
	                return _context3.abrupt('return', _context3.sent);
	
	              case 6:
	              case 'end':
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));
	
	      function getFeedPosts(_x5) {
	        return _ref3.apply(this, arguments);
	      }
	
	      return getFeedPosts;
	    }()
	  }, {
	    key: 'getProviderPosts',
	    value: function () {
	      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(provider) {
	        var endDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	        var startDate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	        var postIds;
	        return _regenerator2.default.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                _context4.next = 2;
	                return redisQuery(this.client, 'zrangebyscore', Keys.providerPostIds(provider), dateToRedis(startDate, '-inf'), dateToRedis(endDate, '+inf'));
	
	              case 2:
	                postIds = _context4.sent;
	                _context4.next = 5;
	                return loadPostsByIds(this.client, postIds);
	
	              case 5:
	                return _context4.abrupt('return', _context4.sent);
	
	              case 6:
	              case 'end':
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));
	
	      function getProviderPosts(_x8) {
	        return _ref4.apply(this, arguments);
	      }
	
	      return getProviderPosts;
	    }()
	  }, {
	    key: 'drop',
	    value: function () {
	      var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
	        return _regenerator2.default.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _context5.next = 2;
	                return redisQuery(this.client, 'flushdb');
	
	              case 2:
	                return _context5.abrupt('return', _context5.sent);
	
	              case 3:
	              case 'end':
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));
	
	      function drop() {
	        return _ref5.apply(this, arguments);
	      }
	
	      return drop;
	    }()
	  }]);
	  return RedisDataStore;
	}();
	
	exports.default = RedisDataStore;
	
	var RedisWriteDataStore = function () {
	  function RedisWriteDataStore(client) {
	    (0, _classCallCheck3.default)(this, RedisWriteDataStore);
	
	    this.client = client.multi();
	  }
	
	  (0, _createClass3.default)(RedisWriteDataStore, [{
	    key: 'commit',
	    value: function () {
	      var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
	        return _regenerator2.default.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                _context6.next = 2;
	                return redisQuery(this.client, 'exec');
	
	              case 2:
	                return _context6.abrupt('return', _context6.sent);
	
	              case 3:
	              case 'end':
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));
	
	      function commit() {
	        return _ref6.apply(this, arguments);
	      }
	
	      return commit;
	    }()
	  }, {
	    key: 'discard',
	    value: function discard() {
	      redisOneOffQuery(this.client, 'discard');
	    }
	  }, {
	    key: 'savePosts',
	    value: function savePosts(posts) {
	      if (!posts.length) {
	        return;
	      }
	      var args = posts.reduce(function (arr, post) {
	        return [].concat((0, _toConsumableArray3.default)(arr), [Keys.post(post.id), (0, _stringify2.default)((0, _momentize.demomentize)(post))]);
	      }, []);
	      redisOneOffQuery.apply(undefined, [this.client, 'mset'].concat((0, _toConsumableArray3.default)(args)));
	    }
	  }, {
	    key: 'saveLastProviderPostDate',
	    value: function saveLastProviderPostDate(provider, date) {
	      redisOneOffQuery(this.client, 'set', Keys.providerLastPostDate(provider), dateToRedis(date));
	    }
	  }, {
	    key: 'saveLastFeedPostDates',
	    value: function saveLastFeedPostDates(feed, dates) {
	      redisOneOffQuery(this.client, 'set', Keys.feedLastPostDates(feed), dates ? (0, _stringify2.default)(dates.map(dateToRedis)) : null);
	    }
	  }, {
	    key: 'addPostsToFeed',
	    value: function addPostsToFeed(feed, posts) {
	      if (!posts.length) {
	        return;
	      }
	
	      var args = posts.reduce(function (arr, post) {
	        return [].concat((0, _toConsumableArray3.default)(arr), [dateToRedis(post.created_time), post.id]);
	      }, []);
	      redisOneOffQuery.apply(undefined, [this.client, 'zadd', Keys.feedPostIds(feed)].concat((0, _toConsumableArray3.default)(args)));
	    }
	  }, {
	    key: 'addPostsToProvider',
	    value: function addPostsToProvider(provider, posts) {
	      if (!posts.length) {
	        return;
	      }
	
	      var args = posts.reduce(function (arr, post) {
	        return [].concat((0, _toConsumableArray3.default)(arr), [dateToRedis(post.created_time), post.id]);
	      }, []);
	      redisOneOffQuery.apply(undefined, [this.client, 'zadd', Keys.providerPostIds(provider)].concat((0, _toConsumableArray3.default)(args)));
	    }
	  }]);
	  return RedisWriteDataStore;
	}();
	
	function redisOneOffQuery(client, command) {
	  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	    args[_key2 - 2] = arguments[_key2];
	  }
	
	  _log2.default.debug.apply(_log2.default, ['Redis: ' + command].concat((0, _toConsumableArray3.default)(args.map(function (arg) {
	    return '"' + arg + '"';
	  }))));
	
	  if (!client[command]) {
	    throw new Error('Redis: undefined command ' + command);
	  }
	
	  client[command].apply(client, args);
	}
	
	function dateToRedis(date, defaultValue) {
	  return date ? date.valueOf() : defaultValue;
	}
	
	function dateFromRedis(redisDate) {
	  return redisDate ? (0, _moment2.default)(Number(redisDate)) : null;
	}
	module.exports = exports['default'];

/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/core-js/json/stringify");

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/toConsumableArray");

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(29);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	exports.momentize = momentize;
	exports.demomentize = demomentize;
	
	var _moment = __webpack_require__(16);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function momentize(post) {
	  if (!_moment2.default.isMoment(post.created_time)) {
	    return (0, _extends3.default)({}, post, {
	      created_time: (0, _moment2.default)(post.created_time)
	    });
	  }
	  return post;
	}
	
	function demomentize(post) {
	  if (_moment2.default.isMoment(post.created_time)) {
	    return (0, _extends3.default)({}, post, {
	      created_time: post.created_time.valueOf()
	    });
	  }
	  return post;
	}

/***/ },
/* 29 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/extends");

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _regenerator = __webpack_require__(3);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _asyncToGenerator2 = __webpack_require__(4);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _classCallCheck2 = __webpack_require__(12);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(13);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ProviderMock = function () {
	  function ProviderMock(id, posts) {
	    var _this = this;
	
	    (0, _classCallCheck3.default)(this, ProviderMock);
	
	    Object.defineProperty(this, 'feedId', {
	      get: function get() {
	        return id;
	      }
	    });
	
	    this._posts = [];
	    posts.forEach(function (p) {
	      return _this.addPost(p);
	    });
	  }
	
	  (0, _createClass3.default)(ProviderMock, [{
	    key: 'fetchPosts',
	    value: function () {
	      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
	        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
	        var pageToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	        var start, end;
	        return _regenerator2.default.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                start = pageToken ? pageToken : 0;
	                end = start + limit;
	                return _context.abrupt('return', {
	                  posts: this._posts.slice(start, end),
	                  nextPageToken: end < this._posts.length ? end : null
	                });
	
	              case 3:
	              case 'end':
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));
	
	      function fetchPosts() {
	        return _ref.apply(this, arguments);
	      }
	
	      return fetchPosts;
	    }()
	  }, {
	    key: 'addPost',
	    value: function addPost(post) {
	      this._posts.push(post);
	      this._posts.sort(postDateDescComparator);
	    }
	  }]);
	  return ProviderMock;
	}();
	
	exports.default = ProviderMock;
	
	
	function postDateDescComparator(p1, p2) {
	  // moment.js date/time comparison
	  return p2.created_time.diff(p1.created_time);
	}
	module.exports = exports['default'];

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _regenerator = __webpack_require__(3);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _promise = __webpack_require__(10);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _asyncToGenerator2 = __webpack_require__(4);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _classCallCheck2 = __webpack_require__(12);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(13);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FeedMock = function () {
	  function FeedMock(id, providers) {
	    (0, _classCallCheck3.default)(this, FeedMock);
	
	    this._feedId = id;
	    this._providers = providers;
	  }
	
	  (0, _createClass3.default)(FeedMock, [{
	    key: "getProviders",
	    value: function getProviders() {
	      return this._providers;
	    }
	  }, {
	    key: "getFeedId",
	    value: function getFeedId() {
	      return this._feedId;
	    }
	  }, {
	    key: "filterPosts",
	    value: function filterPosts(posts) {
	      return posts;
	    }
	  }, {
	    key: "fetchPosts",
	    value: function () {
	      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(options) {
	        var feeds;
	        return _regenerator2.default.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return _promise2.default.all(this._providers.map(function (p) {
	                  return p.fetchPosts(options.limit);
	                }));
	
	              case 2:
	                feeds = _context.sent;
	                return _context.abrupt("return", feeds.reduce(function (allPosts, feed) {
	                  return allPosts.concat(feed.posts);
	                }, []).sort(postDateDescComparator));
	
	              case 4:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));
	
	      function fetchPosts(_x) {
	        return _ref.apply(this, arguments);
	      }
	
	      return fetchPosts;
	    }()
	  }]);
	  return FeedMock;
	}();
	
	exports.default = FeedMock;
	
	
	function postDateDescComparator(p1, p2) {
	  // moment.js date/time comparison
	  return p2.created_time.diff(p1.created_time);
	}
	module.exports = exports["default"];

/***/ }
/******/ ]);
//# sourceMappingURL=test.bundle.js.map